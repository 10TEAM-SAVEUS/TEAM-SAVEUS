"use client";
import { useEffect, useState } from "react";
import Footer from "@/components/common/Footer";
import Header from "@/components/common/Header";
import Image from "next/image";
import rightarrow from "../../assets/rightarrow.svg";
import emptyPin from "../../assets/emptyPin.svg";
import share from "../../assets/share.svg";
import cnnvdReport from "../../assets/first_card_large_Image.svg";
import newProduct from "../../assets/second_card_large_Image.svg";
import ciscoCnnvdReport from "../../assets/third_card_large_Image.svg";
import { useRouter } from "next/navigation"; // App Router에서는 next/navigation 사용
import { firestore } from "../../../firebaseConfig"; // Firestore import
import { collection, getDocs, query, orderBy, limit } from "firebase/firestore";

export default function VulnerabilityPage() {
  const [reports, setReports] = useState<any[]>([]);
  const [recentReports, setRecentReports] = useState<any[]>([]); // To store the most recent reports for the banner
  const [currentPage, setCurrentPage] = useState(1);
  const pageSize = 10; // 한 페이지에 보여줄 항목 수
  const router = useRouter();

  const calculateDaysAgo = (crawlingDate: Date) => {
    const currentDate = new Date();
    const differenceInTime = currentDate.getTime() - crawlingDate.getTime();
    const differenceInDays = Math.floor(differenceInTime / (1000 * 3600 * 24)); // 하루 밀리초 수로 나눔
    return differenceInDays === 0 ? "오늘" : `${differenceInDays}일 전`;
  };

  useEffect(() => {
    const fetchReports = async () => {
      // Firestore에서 ReleaseDate를 기준으로 최신순으로 정렬된 데이터 가져오기
      const reportsQuery = query(
        collection(firestore, "Reports"),
        orderBy("ReleaseDate", "desc")
      );

      const querySnapshot = await getDocs(reportsQuery);
      const reportsData = querySnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));

      setReports(reportsData);
    };

    const fetchRecentReports = async () => {
      // Firestore에서 CrawlingDate를 기준으로 최신 3개의 보고서를 가져오기
      const recentReportsQuery = query(
        collection(firestore, "Reports"),
        orderBy("CrawlingDate", "desc"),
        limit(3)
      );

      const querySnapshot = await getDocs(recentReportsQuery);
      const recentReportsData = querySnapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));

      setRecentReports(recentReportsData);
    };

    fetchReports();
    fetchRecentReports();
  }, []);

  // 페이지 변경 핸들러
  const handlePageChange = (newPage: number) => {
    setCurrentPage(newPage);
  };

  // 보고서 클릭 시 페이지 이동
  const handleClick = (id: string) => {
    router.push(`/vulnerabilityDB/${id}`);
  };

  // 현재 페이지의 데이터를 슬라이싱
  const currentReports = reports.slice(
    (currentPage - 1) * pageSize,
    currentPage * pageSize
  );

  const totalPages = Math.ceil(reports.length / pageSize);

  return (
    <>
      <Header />
      <main className="flex flex-col items-center">
        {/* 상단 이미지 배너 섹션 */}
        <section
          className="w-[1313px] h-[390px] flex justify-between mt-[27px]"
          aria-labelledby="featured-reports"
        >
          <h2 id="featured-reports" className="sr-only">
            Featured Reports
          </h2>
          {recentReports.map((report, index) => (
            <div
              key={report.id}
              className="group relative flex-shrink-0 h-full mr-[28px] transition-all duration-300 cursor-pointer"
              onClick={() => handleClick(report.id)}
            >
              <Image
                src={
                  index === 0
                    ? cnnvdReport
                    : index === 1
                    ? newProduct
                    : ciscoCnnvdReport
                }
                alt={`[취약성 경고] ${report.Title}`}
                width={316}
                height={390}
                className="object-cover h-full w-[316px] group-hover:w-[625px] rounded-3xl transition-all duration-300"
              />
              <div className="absolute bottom-8 left-2 text-white p-2 rounded-md">
                <h3 className="text-lg font-semibold">{report.Title}</h3>
                <p className="text-sm text-[#969696] w-[90px] h-[44px]">
                  {" "}
                  {new Date(report.ReleaseDate.seconds * 1000).toLocaleString()}
                </p>
              </div>
              <button className="absolute bottom-4 right-4 rounded-full p-1 shadow-md">
                <Image
                  src={rightarrow}
                  alt="가장 최신으로 업데이트된 보고서 보러가기"
                  width={68}
                  height={68}
                />
              </button>
            </div>
          ))}
        </section>

        <section className="w-[1313px] h-[82px] flex items-center mt-[76px] gap-2.5">
          <div className="w-full h-full p-[2px] bg-gradient-to-r from-[#6100FF] to-[#4F6BFF] rounded-lg">
            <input
              type="text"
              className="w-full h-full px-4 py-2 border-none rounded-lg text-xl text-gray-700 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-purple-500 transition duration-300 ease-in-out"
              placeholder="검색어를 입력해주세요."
              style={{ backgroundColor: "white" }} // Input 자체의 배경은 흰색으로 설정
            />
          </div>
        </section>

        {/* 취약점 DB 섹션 */}
        <section
          className="w-[1313px] flex mt-[76px]"
          aria-labelledby="vulnerability-db"
        >
          <div className="flex-1">
            <h2
              id="vulnerability-db"
              className="text-[24px] font-semibold leading-[29.05px] tracking-[-0.01em] mb-4"
            >
              취약점 DB
            </h2>
            <div className="flex mb-4">
              <span className="flex bg-[#FF6D6D] w-[59px] h-[35px] pt-2.5 pr-3 py-2.5 pl-3 gap-2.5 rounded-full items-center text-white text-[16px] font-semibold mr-3">
                HOT
              </span>
              <span className="flex items-center bg-[#E8E8E8] w-[62px] h-[35px] pt-2.5 pr-3 py-2.5 pl-3 gap-2.5 rounded-full text-[#ADADAD] text-[16px] font-semibold">
                NEW
              </span>
            </div>
            <ul>
              {currentReports.map((report) => (
                <li
                  key={report.id}
                  className="w-[865px] h-[258px] border border-solid border-[#C3C3C3] rounded-lg mb-4 cursor-pointer"
                  onClick={() => handleClick(report.id)}
                >
                  <article>
                    <header className="flex pl-7 pt-7 pb-2">
                      <span className="flex bg-[#FF6D6D] w-[59px] h-[35px] pt-2.5 pr-3 py-2.5 pl-3 gap-2.5 rounded-full items-center text-white text-[16px] font-semibold mr-2">
                        HOT
                      </span>
                      <h3 className="flex items-end font-normal text-xl">
                        {report.Title}
                      </h3>
                    </header>
                    <span className="w-[71px] h-[19] text-[16px] font-normal leading-[19.36px] tracking-[-0.01em] text-[#ADADAD] pl-7">
                      {report.Subtitle}
                    </span>
                    <div className="pl-7 pt-[24px] gap-2 whitespace-nowrap">
                      <p className="w-[809px] pt-5 pr-7 pb-5 pl-5 font-normal text-[#797979] text-[16px] bg-[#FAF8FF] rounded-[16px] overflow-hidden whitespace-nowrap text-ellipsis">
                        {report.MainContent.slice(0, 100)}...
                      </p>
                    </div>
                    <footer className="flex justify-between pt-6">
                      <div className="flex pl-7">
                        <button className="pr-3">
                          <Image
                            src={emptyPin}
                            alt="고정 핀 제거 상태"
                            width={28}
                            height={28}
                          />
                        </button>
                        <button>
                          <Image
                            src={share}
                            alt="공유하기 버튼"
                            width={28}
                            height={28}
                          />
                        </button>
                      </div>
                      <time className="pr-7">
                        {calculateDaysAgo(
                          new Date(report.CrawlingDate.seconds * 1000)
                        )}
                      </time>
                    </footer>
                  </article>
                </li>
              ))}
            </ul>
            {/* 페이지네이션 UI */}
            <div className="flex justify-center items-center mt-[76px] mb-[196px] space-x-2">
              <button
                onClick={() => handlePageChange(currentPage - 1)}
                disabled={currentPage === 1}
                className="w-8 h-8 flex items-center justify-center bg-gray-200 rounded-full text-gray-600 disabled:opacity-50"
              >
                &lt;
              </button>
              {Array.from({ length: totalPages }, (_, index) => (
                <button
                  key={index}
                  onClick={() => handlePageChange(index + 1)}
                  className={`w-8 h-8 flex items-center justify-center rounded-full ${
                    currentPage === index + 1
                      ? "bg-blue-600 text-white"
                      : "bg-gray-200 text-gray-600"
                  }`}
                >
                  {index + 1}
                </button>
              ))}
              <button
                onClick={() => handlePageChange(currentPage + 1)}
                disabled={currentPage === totalPages}
                className="w-8 h-8 flex items-center justify-center bg-gray-200 rounded-full text-gray-600 disabled:opacity-50"
              >
                &gt;
              </button>
            </div>
          </div>

          {/* 오른쪽 섹션: 실시간 Topic */}
          <aside className="w-[346px] ml-8" aria-labelledby="real-time-topic">
            <h2 id="real-time-topic" className="font-semibold text-[24px]">
              실시간 Topic
            </h2>
            <p className="font-medium text-lg text-[#969696] pt-[17px] pb-4">
              03.08 10:00시 기준
            </p>
            <ol className="p-[20px] rounded-[8px] border border-solid pt-5 pl-[20px] list-decimal list-inside">
              <li className="font-medium text-lg text-[#6100FF] pt-4 pb-4 border-b border-b-[#E6E6E6]">
                Topic
              </li>
              <li className="font-medium text-lg text-[#3F3F3F] pt-4 pb-4 border-b border-b-[#E6E6E6]">
                웹뷰 프레임 워크
              </li>
              <li className="font-medium text-lg text-[#3F3F3F] pt-4 pb-4 border-b border-b-[#E6E6E6]">
                허프만 코딩 구현
              </li>
              <li className="font-medium text-lg text-[#3F3F3F] pt-4 pb-4 border-b border-b-[#E6E6E6]">
                테스크 커버리지
              </li>
              <li className="font-medium text-lg text-[#3F3F3F] pt-4 pb-4 border-b border-b-[#E6E6E6]">
                코드형 인프라(IaC)
              </li>
              <li className="font-medium text-lg text-[#3F3F3F] pt-4 pb-4 border-b border-b-[#E6E6E6]">
                클린 아키텍쳐
              </li>
              <li className="font-medium text-lg text-[#3F3F3F] pt-4 pb-4 border-b border-b-[#E6E6E6]">
                UI 라이브러리 개발
              </li>
              <li className="font-medium text-lg text-[#3F3F3F] pt-4 pb-4 border-b border-b-[#E6E6E6]">
                AWS Personalize
              </li>
              <li className="font-medium text-lg text-[#3F3F3F] pt-4 pb-4 border-b border-b-[#E6E6E6]">
                키클락
              </li>
              <li className="font-medium text-lg text-[#3F3F3F] pt-4 pb-4 border-b border-b-[#E6E6E6]">
                클린 코어
              </li>
            </ol>
          </aside>
        </section>
      </main>
      <Footer />
    </>
  );
}
